---
apiVersion: v1
kind: ConfigMap
metadata:
  name: talos-patches
  labels:
    app: talos-config
    component: patches
data:
  all-patch.yaml: |
    machine:
      certSANs:
        - {{ .Values.loadBalancerIP }}
      kubelet:
        extraArgs:
          rotate-server-certificates: true
    cluster:
      network:
        podSubnets:
          - 10.245.0.0/16
      extraManifests:
        - https://raw.githubusercontent.com/alex1989hu/kubelet-serving-cert-approver/main/deploy/standalone-install.yaml
        - https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
  worker-patch.yaml: |
    machine:
      kubelet:
        extraMounts:
          - destination: /var/lib/longhorn
            type: bind
            source: /var/lib/longhorn
            options:
              - bind
              - rshared
              - rw
  app-of-apps.yaml: |
    apiVersion: argoproj.io/v1alpha1
    kind: Application
    metadata:
      name: app-of-apps
      namespace: argocd
      finalizers:
        - resources-finalizer.argocd.argoproj.io
    spec:
      project: default
      source:
        repoURL: git@github.com:ulrikof/DCST2900-K8s.git
        targetRevision: network
        path: ArgoCD/apps/addons
        directory:
          recurse: true
      destination:
        server: https://kubernetes.default.svc
        namespace: argocd
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        managedNamespaceMetadata:
          labels:
            createdby: argocd
        syncOptions:
          - CreateNamespace=true
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: talos-config-server
spec:
  selector:
    matchLabels:
      app: talos-config
  serviceName: talos-config
  replicas: 1
  template:
    metadata:
      labels:
        app: talos-config
    spec:
      restartPolicy: Always
      volumes:
        - name: patch-volume
          configMap:
            name: talos-patches
        - name: config-volume
          persistentVolumeClaim:
            claimName: config-volume
        - name: ssh-key
          secret:
            secretName: git-argo-key
      containers:
        - name: talos-bootstrap
          image: alpine:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              apk add --no-cache curl bash tar python3 openssl kubectl openssh-client && \
              curl -sL https://talos.dev/install | sh && \
              curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && \
              chmod +x /usr/local/bin/argocd && \
              mkdir -p ~/.ssh && \
              cp /ssh-key/git-argo-key ~/.ssh/id_rsa && \
              chmod 600 ~/.ssh/id_rsa && \
              ssh-keyscan github.com >> ~/.ssh/known_hosts && \
              if [ ! -f /config/.bootstrapped ]; then
                echo "Running bootstrap script..."
                export IP={{ .Values.loadBalancerIP }} && \
                mkdir -p /config && cd /config && \
                cp /patches/*.yaml . && \
                talosctl gen config K8s-in-K8s https://$IP:6443 \
                  --config-patch @all-patch.yaml \
                  --config-patch-worker @worker-patch.yaml && \
                sleep 10 && \
                echo "Waiting for first config fetch..." && \
                while true; do \
                  if grep -q "/controlplane.yaml" /config/server.log; then \
                    echo "Controlplane config fetched! Bootstrapping..." && \
                    bootstrap_ip=$(grep "/controlplane.yaml" /config/server.log | head -n1 | awk '{print $1}') && \
                    talosctl --talosconfig talosconfig config endpoint "$bootstrap_ip" && \
                    talosctl --talosconfig talosconfig config node "$bootstrap_ip" && \
                    sleep 10 && \
                    talosctl bootstrap --talosconfig talosconfig -n "$bootstrap_ip" -e "$bootstrap_ip" && \
                    talosctl kubeconfig . --talosconfig talosconfig -n "$bootstrap_ip" -e "$bootstrap_ip" && \
                    touch /config/.bootstrapped && \
                    break; \
                  fi; \
                  echo "Still waiting for controlplane fetch..."; \
                  sleep 10; \
                done && \
                export KUBECONFIG=/config/kubeconfig && \
                echo "Waiting for control planes to be Ready..." && \
                until [ "$(kubectl get nodes --no-headers 2>/dev/null | grep 'control-plane' | grep ' Ready ' | wc -l)" -eq 3 ]; do \
                  echo "Still waiting on control planes to be Ready..."; \
                  sleep 30; \
                done && \
                sleep 60 && \
                echo "Installing Argo CD..." && \
                kubectl create namespace argocd && \
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml && \
                kubectl wait deployment argocd-server -n argocd --for=condition=Available=True --timeout=180s && \
                kubectl wait pod -l app.kubernetes.io/name=argocd-application-controller -n argocd --for=condition=Ready --timeout=180s && \
                echo "Logging in to Argo CD..." && \
                kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}' && \
                port=$(kubectl -n argocd get svc argocd-server -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}') && \
                node_ip=$(kubectl get nodes -o wide | grep control-plane | head -n1 | awk '{print $6}') && \
                pw=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) && \
                argocd login "$node_ip:$port" --username admin --password "$pw" --insecure && \
                echo "Adding Git repo..." && \
                argocd repo add git@github.com:ulrikof/DCST2900-K8s.git \
                  --ssh-private-key-path ~/.ssh/id_rsa \
                  --name dcst2900-repo && \
                echo "Applying App of Apps..." && \
                kubectl apply -f /patches/app-of-apps.yaml && \
                echo "Bootstrap complete."
              else
                echo "Already bootstrapped. Skipping bootstrap."
              fi && \
              tail -f /dev/null
          workingDir: /config
          volumeMounts:
            - name: config-volume
              mountPath: /config
            - name: patch-volume
              mountPath: /patches
            - name: ssh-key
              mountPath: /ssh-key
        - name: talos-http-server
          image: python:3
          command: ["/bin/sh", "-c"]
          args:
            - python3 -m http.server 80 2>&1 | tee /config/server.log
          workingDir: /config
          volumeMounts:
            - name: config-volume
              mountPath: /config
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: config-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: longhorn
---
apiVersion: v1
kind: Service
metadata:
  name: talos-config
  labels:
    app: talos-config
spec:
  selector:
    app: talos-config
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP